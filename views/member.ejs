<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= member_name %> </title>
    <!-- ChartJS -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.1.0/dist/chartjs-plugin-annotation.min.js"></script>
    <!-- Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    <!-- Style Stuff -->
    <link href="https://fonts.googleapis.com/css2?family=Fira+Sans&display=swap" rel="stylesheet"> 
    <link href= "/css/member.css" rel="stylesheet" />
</head>
<body>
    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <div class="container-fluid">
            <div class="navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                </ul>
            </div>
            <div class="mx-auto order-0">
                <a class="navbar-brand mx-auto" href="https://www.youtube.com/channel/<%= member_youtube_id %>"><%= member_name %></a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".dual-collapse2">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
            <div class="navbar-collapse collapse w-100 order-3 dual-collapse2">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="https://github.com/denn9s/holo-audience">About</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <main>
        <canvas id="common_chart_canvas"></canvas>
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <div class="percentage-form form-check form-switch float-start">
                        <input class="percentage-switch form-check-input" type="checkbox" role="switch" id="percentage_switch">
                        <label class="percentage-switch-label form-check-label" for="percentage_switch">%</label>
                    </div>
                </div>
                <div class="col-auto my-auto">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-info-circle float-end order-1" viewBox="0 0 16 16" style="-webkit-filter: invert(100%); filter: invert(100%);" data-bs-toggle="tooltip" data-bs-placement="left" title="Placeholder Tooltip">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path>
                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path>
                    </svg>
                </div>
                <div class="col-auto">
                    <div class="text-right dropdown show sort-dropdown float-end">
                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" id="sort_dropdown_button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Sort By</button>
                        <div class="dropdown-menu">
                            <a id="title_sort_button" class="dropdown-item" href="#">Title (A to Z)</a>
                            <a id="title_sort_backwards_button" class="dropdown-item" href="#">Title (Z to A)</a>
                            <a id="date_sort_button" class="dropdown-item" href="#">Date (Oldest to Newest)</a>
                            <a id="date_sort_backwards_button" class="dropdown-item" href="#">Date (Newest to Oldest)</a>
                        </div>
                    </div>
                </div>
            </div>
            <div id="stream_card_row" class="row">
                <% all_streams.sort((a,b) => (b.times.actual_start_time > a.times.actual_start_time) ? 1 : ((a.times.actual_start_time > b.times.actual_start_time) ? -1 : 0)) %>
                <% for (let stream of all_streams) { %>
                    <div class="stream-card-col col-lg-3 col-md-4 col-sm-6 col-12">
                        <div id="<%=stream.id%>_card" class="stream-card card text-center border-dark"> 
                            <img class="card-stream-thumbnail card-img" src="<%= stream.thumbnail_url %>">
                            <div class="card-img-overlay">
                                <div class="card-body">
                                    <h6 class="stream-card-header card-subtitle mb-2 crop-text-3" id="header_<%=stream.id%>"><%= stream.title %></h6>
                                    <% let date_options = {year: 'numeric', month: 'short', day: 'numeric'}; %>
                                    <% let formatted_card_date = new Date(stream.times.actual_start_time).toLocaleDateString("en-US", date_options) %>
                                    <% let formatted_card_date_data = new Date(stream.times.actual_start_time) %>
                                    <a class="stream-card-btn btn btn-secondary w-100 stretched-link" id="button_<%=stream.id%>" data-chatters="<%=stream.unique_viewer_count%>" data-stream="<%=stream.id%>" data-date="<%=formatted_card_date_data%>" onClick="updateChart(this.getAttribute('data-stream'))"><%= formatted_card_date %></a>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </main>

    <script>
        var chart_element = document.getElementById('common_chart_canvas');
        var common_chart = new Chart(chart_element, {
            type: 'scatter',
            data: {
                datasets: [{}]
            },
            options: {
                animation: {
                    duration: 500
                },
                interaction: {
                    intersect: false,
                    mode: 'nearest'
                },
                maintainAspectRatio: false,
                responsive: true,
                scales: {
                    x: {
                        ticks: {
                            display: false,
                            callback: function(value, index, values) {
                                let options = {year: 'numeric', month: 'numeric', day: 'numeric' };
                                let formatted_date = new Date(value).toLocaleString('en-US', options);
                                return formatted_date;
                            },
                            color: 'rgba(255, 255, 255, 0.6)',
                            font: {
                                size: 14,
                                family: 'Fira Sans',
                            },
                        },
                        grid: {
                            color: 'rgba(210, 210, 210, 0.1)',
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            font: {
                                size: 14,
                                family: 'Fira Sans',
                            },
                            display: false,
                            color: 'rgba(255, 255, 255, 0.6)',
                        },
                        grid: {
                            color: 'rgba(210, 210, 210, 0.1)',
                        }
                    }
                },
                plugins: {
                    annotation: {
                        annotations: {
                            line: {
                                type: 'line',
                                xMin: 60,
                                xMax: 60,
                                borderColor: 'rgba(255, 255, 255, 0.6)',
                                borderWidth: 1,
                                label: {
                                    enabled: true,
                                    position: 'start',
                                    backgroundColor: 'rgba(0, 0, 0, 0.3)',
                                    xAdjust: 15,
                                    rotation: 90,
                                    content: 'Stream Date',
                                    color: 'rgb(255, 255, 255)',
                                    font: {
                                        style: 'normal',
                                        size: 12,
                                        family: 'Fira Sans',
                                    },
                                },
                                display: false,
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: '<%= stream_title %>',
                        font: {
                            family: 'Fira Sans',
                            size: 28,
                            weight: 'bold'
                        },
                        color: 'rgba(255, 255, 255, 0.87)'
                    },
                    subtitle: {
                        display: true,
                        text: '',
                        font: {
                            family: 'Fira Sans',
                            size: 20
                        },
                        color: 'rgba(255, 255, 255, 0.87)'
                    },
                    legend: {
                        display: false,
                        labels: {
                            usePointStyle: true,
                            padding: 15,
                            sort: function(a, b, data) {
                                if (a.text > b.text) return 1;
                                else return -1;
                            },
                            font: {
                                size: 14,
                                family: 'Fira Sans',
                            },
                            color: 'rgba(255, 255, 255, 0.87)'
                        }
                    },
                    tooltip: {
                        enabled: true,
                        mode: 'nearest',
                        callbacks: {
                            title: function(ctx) {
                                let title_array = []
                                for (let point of ctx) {
                                    let dataset_index = point.dataIndex;
                                    title_array.push(point.dataset.data[dataset_index].stream_title);
                                }
                                return title_array
                            },
                            label: function(ctx) {
                                return ctx.dataset.stream_member;
                            },
                            footer: function(ctx) {
                                let count_array = []
                                for (let point of ctx) {
                                    let dataset_index = point.dataIndex;
                                    count_array.push(`Common Chatters: ${point.formattedValue} (${(point.dataset.data[dataset_index].viewer_percentage * 100).toFixed(2)}%)`);
                                    count_array.push(`Total Chatters: ${(point.dataset.data[dataset_index].viewer_count).toLocaleString()}`)
                                }
                                return count_array
                            },
                            afterFooter: function(ctx) {
                                let formatted_date = new Date(parseInt(ctx[0].label.replaceAll(',', ''))).toLocaleString('en-US');
                                return `Stream Time: ${formatted_date.toString()}`;
                            }
                        }
                    }
                }
            }
        });
    </script>

    <script>
        // enabling Bootstrap tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) { return new bootstrap.Tooltip(tooltipTriggerEl) });

        let most_recent_card_id = '';
        var style = getComputedStyle(document.body);

        async function clearBorder(stream_id) {
            let card_id = `${stream_id}_card`;
            let card = document.getElementById(card_id);
            card.classList.add('border-dark');
            card.style.border = '';
        }

        async function highlightBorder(stream_id) {
            let card_id = `${stream_id}_card`;
            let card = document.getElementById(card_id);
            card.classList.remove('border-dark');
            card.style.border = `3px solid ${style.getPropertyValue('--bs-info')}`;
        }

        function togglePercentage() {
            function swapKeys(obj, key1, key2) {
                [obj[key1], obj[key2]] = [obj[key2], obj[key1]];
            }
            for (let member_data of common_chart.data.datasets) {
                for (let point of member_data.data) {
                    swapKeys(point, 'y', 'viewer_percentage');
                }
            }
            if (document.getElementById('percentage_switch').checked) {
                common_chart.options.scales.y.ticks.callback = function(value, index, values) {
                    return (value * 100).toFixed(0) + '%'
                }
                common_chart.options.plugins.tooltip.callbacks.footer = function(ctx) {
                    let count_array = []
                    for (let point of ctx) {
                        let dataset_index = point.dataIndex;
                        count_array.push(`Common Chatters Percentage: ${(point.formattedValue * 100).toFixed(2)}% (${point.dataset.data[dataset_index].viewer_percentage} viewers)`);
                        count_array.push(`Total Chatters: ${(point.dataset.data[dataset_index].viewer_count).toLocaleString()}`)
                    }
                    return count_array
                }
            } else {
                common_chart.options.scales.y.ticks.callback = function(value, index, values) {
                    return parseInt(value).toLocaleString('en-US');
                }
                common_chart.options.plugins.tooltip.callbacks.footer = function(ctx) {
                    let count_array = []
                    for (let point of ctx) {
                        let dataset_index = point.dataIndex;
                        count_array.push(`Common Chatters: ${point.formattedValue} (${(point.dataset.data[dataset_index].viewer_percentage * 100).toFixed(2)}%)`);
                        count_array.push(`Total Chatters: ${(point.dataset.data[dataset_index].viewer_count).toLocaleString()}`)
                    }
                    return count_array
                }
            }
        }

        async function updateChart(stream_id) {
            if (most_recent_card_id !== '') {
                clearBorder(most_recent_card_id);
            }
            most_recent_card_id = stream_id;
            highlightBorder(stream_id);

            let stream_header = document.getElementById(`header_${stream_id}`)
            let viewer_count = $(`#button_${stream_id}`).attr('data-chatters');
            $(window).scrollTop(0);
            $.ajax({
                url : `http://143.244.185.55/api/chart/<%=member_id%>/${stream_id}`,
                type : 'GET',
                dataType:'json',
                success : function(res) {
                    // clearing all data/datasets
                    let date = res.stream_date;
                    let data = res.final_chart_data;
                    for (let i in common_chart.data.datasets.length) {
                        common_chart.data.datasets[i].data = [];
                    }
                    common_chart.data.datasets = data;
                    if (document.getElementById('percentage_switch').checked) {
                        togglePercentage();
                    }
                    common_chart.options.scales.x.ticks.display = true;
                    common_chart.options.scales.y.ticks.display = true;
                    common_chart.options.plugins.legend.display = true;
                    common_chart.options.plugins.title.text = `${stream_header.textContent}`;
                    common_chart.options.plugins.subtitle.text =  `${parseInt(viewer_count).toLocaleString('en-US')} unique chatters`
                    common_chart.options.plugins.annotation.annotations.line.xMin = date;
                    common_chart.options.plugins.annotation.annotations.line.xMax = date;
                    common_chart.options.plugins.annotation.annotations.line.display = true;
                    common_chart.update();
                },
                error : function(req, err) {
                    alert(err);
                }
            });
        }

        if ('<%=stream_id%>' !== '') {
            updateChart('<%=stream_id%>')
        }

        common_chart.options.plugins.legend.onHover = function(x, y, z) {
            for (let index in common_chart.data.datasets) {
                index = parseInt(index);
                if (y.datasetIndex === index) {
                    common_chart.data.datasets[index].radius = 7;
                    common_chart.data.datasets[index].showLine = true;
                } else {
                    common_chart.data.datasets[index].radius = 2;
                }
            }
            common_chart.update();
        }

        common_chart.options.plugins.legend.onLeave = function(x, y, z) {
            for (let index in common_chart.data.datasets) {
                index = parseInt(index);
                if (y.datasetIndex === index) {
                    common_chart.data.datasets[index].radius = 5;
                    common_chart.data.datasets[index].showLine = false;
                } else {
                    common_chart.data.datasets[index].radius = 5;
                }
            }
            common_chart.update();
        }

        let canvas = document.getElementById("common_chart_canvas");
        canvas.onclick = function(evt) {
            let points = common_chart.getElementsAtEventForMode(evt, 'nearest', {}, true);
            if (points.length) {
                const point = points[0];
                let datasetIndex = point.datasetIndex;
                var member_id = common_chart.data.datasets[datasetIndex].label;
                var stream_id = common_chart.data.datasets[point.datasetIndex].data[point.index].stream_id;
                window.location.href = `http://localhost:3000/${member_id}/${stream_id}`;
            }
        };
    </script>

    <script>
        $stream_card_divs = $('div.stream-card-col');
        $sort_button = $('#sort_dropdown_button');

        $('#title_sort_button').on('click', function () {
            $sort_button.text(this.innerText);
            var sortedDivs = $stream_card_divs.sort(function (a, b) {
                return $(a).find('h6.stream-card-header').text() > $(b).find('h6.stream-card-header').text()
            });
            $('#stream_card_row').html(sortedDivs);
        });

        $('#title_sort_backwards_button').on('click', function () {
            $sort_button.text(this.innerText);
            var sortedDivs = $stream_card_divs.sort(function (a, b) {
                return $(a).find('h6.stream-card-header').text() < $(b).find('h6.stream-card-header').text()
            });
            $('#stream_card_row').html(sortedDivs);
        });

        $('#date_sort_button').on('click', function () {
            $sort_button.text(this.innerText);
            var sortedDivs = $stream_card_divs.sort(function (a, b) {
                return Date.parse($(a).find('a.stream-card-btn').attr('data-date')) > Date.parse($(b).find('a.stream-card-btn').attr('data-date'))
            });
            $('#stream_card_row').html(sortedDivs);
        });

        $('#date_sort_backwards_button').on('click', function () {
            $sort_button.text(this.innerText);
            var sortedDivs = $stream_card_divs.sort(function (a, b) {
                return Date.parse($(a).find('a.stream-card-btn').attr('data-date')) < Date.parse($(b).find('a.stream-card-btn').attr('data-date'))
            });
            $('#stream_card_row').html(sortedDivs);
        });

        $('#percentage_switch').change(function() {
            togglePercentage();
            common_chart.update();
        })
    </script>
</body>
</html>